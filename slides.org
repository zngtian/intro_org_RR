#+TITLE: Emacs, Org-Mode, and Reproducible Research
#+AUTHOR: Zheng Tian
#+DATE:

#+OPTIONS: toc:1

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1000 reveal_height:800

#+REVEAL_ROOT: ./reveal.js
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: convex
#+REVEAL_THEME: beige
#+REVEAL_HLEVEL: 2
#+REVEAL_PLUGINS: (highlight notes zoom)
#+REVEAL_EXTRA_JS:  { src: './reveal.js/plugin/menu/menu.js' }


* Introduction

#+BEGIN_NOTES
- This workshop is to share my experience of using emacs and org mode
  to document my research.
- I have been using it for three years. But there were some back and
  forth, abandoning it and picking it up again.
- This workshop tries to help you have a quick start with emacs and
  org mode, avoiding the zig-zag path I learned it.
#+END_NOTES

** Have you ever experienced this?
:PROPERTIES:
:BEAMER_env: frame
:END:

#+ATTR_HTML: :width 600 :height 600
#+ATTR_LATEX: :width 0.5\textwidth
[[file:figure/phdcomics.png]]

#+BEGIN_NOTES
- Briefly describe the comic.
- Tell them my story in the ECIO model.
  - Write some code to solve a problem.
  - Document them in the python file very casually.
  - Write separate files for documentation, hard to read.
  - Leave followers (Xueting, Peter) hard to figure it out.

- Raise the question: IS THERE A GOOD WAY TO DOCUMENT CODE?
  - Easy to document
  - Combine the code and documentation with one file
#+END_NOTES


** Reproducible research
:PROPERTIES:
:BEAMER_env: frame
:END:

  #+BEGIN_QUOTE
  An article about computational science in a scientific publication is
  not the scholarship itself, it is merely advertising of the
  scholarship. The actual scholarship is the complete software
  development environment and the complete set of instructions which
  generated the figures.

  -- Buckheit and Donoho (1995)
  #+END_QUOTE

#+BEGIN_NOTES
- Reflect the question raised. Answer is to do reproducible research.
- The spirit of reproducible research is in the following quotation.
#+END_NOTES


** How can we do reproducible research?
:PROPERTIES:
:BEAMER_env: frame
:END:

#+ATTR_HTML: :width 800 :height 600
#+ATTR_LATEX: :width 0.8\textwidth
[[file:figure/emacs_startup.png]]

#+BEGIN_NOTES
- HOW CAN WE IMPLEMENT REPRODUCIBLE RESEARCH?
- This workshop introduces a very powerful and handy tool: Emacs and
  its org-mode.
- Describe the snapshot.
#+END_NOTES


* Emacs

** What is Emacs? A text editor.
:PROPERTIES:
:BEAMER_env: frame
:END:

GNU Emacs is a free, portable, extensible text editor.

- Free :: Open source, freely copyable and redistributable.
- Portable :: Run on many machines under different operating systems.
- Extensible :: Customizable for all aspect and have many contributed
                packages.


** Emacs is beyond a text editor

*** Emacs is a LaTeX editor via AucTex

#+CAPTION: An illustration of the AucTex mode
#+ATTR_HTML: :width 800 :height 600
#+ATTR_LATEX: :width 0.6\textwidth
[[file:figure/auctex_example.png]]

*** Emacs is IDE for programming languages

- Edit code with syntax highlighting
- Execute code within Emacs

#+CAPTION: An illustration of the ESS mode
#+ATTR_HTML: :width 800 :height 600
#+ATTR_LATEX: :width 0.6\textwidth
[[file:figure/r_example.png]]

#+BEGIN_NOTES
- Mention that emacs can also be the IDE for writing python, c/c++,
  html.
- Maybe show changing to python-mode in the *scratch* buffer.
#+END_NOTES

*** Emacs is an operating system

#+ATTR_LATEX: :width 0.6\textwidth :height 0.6\textheight
#+ATTR_HTML: :width 600 :height 550
#+CAPTION: Emacs as an operating system with the dired mode
[[file:figure/dired_example.png]]

*** Emacs is a Git tool via Magit

#+CAPTION: An illustration of the Magit mode
#+ATTR_HTML: :width 800 :height 600
#+ATTR_LATEX: :width 0.6\textwidth
[[file:figure/magit_example.png]]

*** Emacs can do many other things

- Emacs can do spell checking, reading news, checking and sending
  emails, etc., through plenty of contributed packages.
- Most importantly, Emacs enable researchers to manage research
  project, take notes, and write dynamic documentation.


** Installation and Configuration

*** Installation
- Homepage of GNU Emacs: https://www.gnu.org/software/emacs/

- Vincent Goulet's binary files:
  http://vgoulet.act.ulaval.ca/en/emacs/

#+BEGIN_NOTES
- I personally prefer the second option because it has already included
  some of the mostly used packages.
- Open the link in a new tab.
#+END_NOTES

*** Configuration

Emacs is customizable and all customized configuration can be done
with either a =.emacs= file or ~init.el~ under the directory
=~/.emacs.d=.

With some settings, we can use an org file to organize and apply your
customization.

*** My settings

All my settings have been uploaded to Github from where you can
download or

#+BEGIN_SRC sh
git clone https://github.com/zngtian/.emacs.d.git
#+END_SRC

**** A sneak peek of my settings

- init.el :: https://github.com/zngtian/.emacs.d/blob/master/init.el
- myconfig.org :: https://github.com/zngtian/.emacs.d/blob/master/myconfig.org

#+BEGIN_NOTES
- Open the files in new tabs.
- Tell them to change the paths and files names in myconfig.org.
#+END_NOTES


** Basic usage of Emacs

*** Notation
In Emacs documentation, we often see the following notations

- C-x :: Press Control key and x
- M-x :: Press Alt key and x
- RET :: Press the return key
- SPC :: Press the space bar
- ESC :: Press the escape key
- S-<TAB> :: Press shift and tab keys

*** Buffer and windows

The basic user interface of Emacs uses buffers and windows.

#+ATTR_LATEX: :width 1.0\textwidth :height 0.8\textheight
#+ATTR_HTML: :width 900 :height 550
#+CAPTION: An example of Emacs buffers and windows
[[file:figure/buffer_example.png]]

#+BEGIN_NOTES
- Explain each part.
- Demonstrate some operations on Emacs in this section.
#+END_NOTES

*** Motion within a buffer

- C-f and M-f :: move forward by one character and by one word
- C-b and M-b :: move backward by one letter and by one word
- C-n and C-p :: move downward and upward
- C-v and M-v :: scroll down and up
- M-< and M-> :: move to the start and to the end of a buffer

#+BEGIN_NOTES
- Not to show these commands right now.
- Demonstrate all these operations when showing the example via
  mwe-log-commands.
#+END_NOTES

*** Switch buffers and windows

- C-x 2 :: open a new buffer
- C-x 0 :: close the current buffer
- C-x b :: switch to a buffer
- C-x o :: switch between two opened buffers
- C-x 4 b :: switch to a buffer and open it as a new one
- C-x 5 2 and C-x 5-0 :: open and close a new window

*** Open, save, quit, and help

- C-x C-f :: open a new file
- C-x C-s :: save the current buffer
- C-x s :: save all files
- C-g :: cancel the currently invoked command. VERY IMPORTANT!
- C-x C-c :: exit Emacs
- C-h ?/m/a :: get help

*** Copy, yank, and delete

- C-SPC :: set a mark and move the cursor around to select a region
- C-w :: kill (cut)
- M-w :: copy
- C-y :: yank (paste)
- DEL and C-d :: delete a character backward and forward
- M-DEL and M-d :: delete a word backward and forward
- C-k :: kill a line.
- C-x u :: undo the previous editing.

*** Tutorial and cheat sheet

- C-h t :: open the complete tutorial

- A guided tour :: https://www.gnu.org/software/emacs/tour/

- Cheat sheet :: https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf


* Org-Mode

** What is org-mode
:PROPERTIES:
:BEAMER_env: frame
:END:

Org mode is one of the most popular contributed packages in Emacs. It
can accomplish a variety of work including, but not limited to,

- taking notes with structured documents,
- assigning tasks and scheduling them,
- editing tables and doing calculation,
- exporting to pdf, html, odt files,
- *working with source code*.


** Structured document

#+BEGIN_NOTES
This is the fundamental function of org mode.
#+END_NOTES

*** Headline
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
 * Top level headline
 ** Second level
 *** 3rd level
     some text
 *** 3rd level
     more text

 * Another top level headline
#+END_EXAMPLE

- <TAB> :: hit at a headline to see and hide the content under it
- S-<TAB> :: global cycling.
- M-left and M-right :: promote and demote a heading

#+BEGIN_NOTES
- Use org-bullets to make document structure look neat.
#+END_NOTES

*** Lists
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
- Unordered list
  + Item 1
  + Item 2
- Ordered list
  1. first thing
  2. second thing
  3. third thing
- Description
  - Tom :: a cat
  - Jerry :: a mouse
- List with check box [1/2]
  - [X] Do this
  - [ ] Do that
#+END_EXAMPLE


** Special elements

*** Links

- The basic syntax for a link:
  #+BEGIN_EXAMPLE
  [[link][description]] or [[link]]
  #+END_EXAMPLE

- Internal link: [[Lists]]
  #+BEGIN_EXAMPLE
  [[Lists]]
  #+END_EXAMPLE

- External link: [[file:slides.tex]]
  #+BEGIN_EXAMPLE
 [[file:slides.tex]]
  #+END_EXAMPLE

- URL: [[http://rri.wvu.edu/]]
  #+BEGIN_SRC
  [[http://rri.wvu.edu/]]
  #+END_SRC


#+BEGIN_NOTES
- Use C-c l to save a link, and C-c C-l to insert the saved link.
#+END_NOTES

*** Blocks
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

- Blocks are defined by =#+BEGIN_... and #+END_...=

- The CENTER block

  #+BEGIN_CENTER
  This sentence will be centered in the exported file
  #+END_CENTER

  #+BEGIN_EXAMPLE
  #+BEGIN_CENTER
  This sentence will be centered in the exported file
  #+END_CENTER
  #+END_EXAMPLE

- The QUOTE block

  #+BEGIN_QUOTE
   Everything should be made as simple as possible,
   but not any simpler -- Albert Einstein
   #+END_QUOTE

  #+BEGIN_EXAMPLE
  #+BEGIN_QUOTE
   Everything should be made as simple as possible,
   but not any simpler -- Albert Einstein
   #+END_QUOTE
  #+END_EXAMPLE

#+BEGIN_NOTES
- Just mention the source code block here.
#+END_NOTES

*** Mathematics

Org mode can contain LaTeX math fragments that don't need any special
marking. Just do as in LaTeX.

#+BEGIN_EXAMPLE
\begin{equation}
    x=\sqrt{b}
\end{equation}

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} \text{ or }  a=-\sqrt{2} $$
#+END_EXAMPLE

\begin{equation}
    x=\sqrt{b}
\end{equation}

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} \text{ or }  a=-\sqrt{2} $$

#+BEGIN_NOTES
- Mention the preview function. C-c C-x C-l
#+END_NOTES

*** Table

- ‘|’ as the first non-whitespace character starts a table. The
  following texts yield a table in HTML export

  #+BEGIN_EXAMPLE
  | Name  | Age | Score |
  |-------+-----+-------|
  | Peter |  17 |  1234 |
  | Anna  |  25 |  4321 |
  #+END_EXAMPLE

  | Name  | Age | Score |
  |-------+-----+-------|
  | Peter |  17 |  1234 |
  | Anna  |  25 |  4321 |

*** Calculation in a table

- We can define formula for a field, a row, or a column by starting a
  field with "=" or ":=".

#+BEGIN_EXAMPLE
| Name  | Age | Score |
|-------+-----+-------|
| Peter |  17 |  1234 |
| Anna  |  25 |  4321 |
|       |  21 |  5555 |
#+TBLFM: @4$2=vmean(@2..@3)::@4$3=vsum(@2..@3)
#+END_EXAMPLE

| Name  | Age | Score |
|-------+-----+-------|
| Peter |  17 |  1234 |
| Anna  |  25 |  4321 |
|       |  21 |  5555 |
#+TBLFM: @4$2=vmean(@2..@3)::@4$3=vsum(@2..@3)


** Exporting
:PROPERTIES:
:BEAMER_env: frame
:END:

- An org file can be exported to a variety of formats, including
  latex, beamer, html, odt, etc.
- C-c C-e: start the export dispatcher.
  - l o: export to pdf and open it.
  - h o: export to html and open it.

- This presentation is exported with the ~og-reveal~ package.
- Export settings can be set using some keywords, such as
  ~#+TITLE, #+AUTHOR, #+OPTIONS, #+LATEX_HEADER, #+HTML_HEADER~,
  etc.


** Tasks and agenda view

#+BEGIN_NOTES
This is my favorite function of org mode.
#+END_NOTES

*** A sneak peek of my agenda

The org mode is a handy tool to plan daily life and manage
research projects.

#+CAPTION: An illustration of agenda view
#+ATTR_LATEX: :width 0.6\textwidth :height 0.5\textheight
#+ATTR_HTML: :width 700 :height 550
[[file:figure/agenda_example.png]]

#+BEGIN_NOTES
- This graph includes many elements for assigning tasks
  - Todo list
  - Schedule
#+END_NOTES

*** To-do items

TODO items in org mode are headlines defined by TODO keywords after
asterisks.

#+BEGIN_EXAMPLE
 * [#A] TODO Do this first.
 * DONE This task has been done
#+END_EXAMPLE

- M-S RET :: quick enter a TODO item
- S-right/left :: cycle through TODO status
- S-up/down :: cycle through priorities.


*** Schedule and deadline

We can set schedule and deadline to TODO items.

- C-c C-s :: set a day and time to begin doing this item
- C-c C-d :: set a deadline

#+BEGIN_EXAMPLE
 * [#A] TODO Do this first.
   SCHEDULED: <2017-02-03 Fri>

 * DONE This task has been done
   DEADLINE: <2017-02-03 Fri>
#+END_EXAMPLE

- Time stamps are generated using the calendar minor mode.


*** Agenda view

All TODO items, schedules, and deadlines can be viewed in the Agenda
view in org mode.

- C-c a a :: start the agenda view
- C-c a t :: see all TODO items
- C-c a m :: filter TODO items by tags

Within the agenda view, you can filter by tag, change the status, and
go to the headline of a TODO item.


** Org-ref

Org-ref is a package developed by John Kitchin for reference
management.

#+CAPTION: A glimpse of org-ref
[[file:figure/orgref.png]]


* Reproducible research with org-mode

** Reproducible research: basics

*** What is reproducible research?

#+BEGIN_QUOTE
The data and code used to make a finding are available and they are
sufficient for an independent researcher to recreate the finding.
-- Gandrud (2015)
#+END_QUOTE


*** Why should we do reproducible research?

**** For readers

- Easy for reviewers to test and validate your findings.
- Easy for readers to reuse your code in their research.
- Make your paper a reliable citation.

**** For ourselves

- Easy for us to tract and retrospect what we have done.
- Helpful to have good research habits and workflow.
- Facilitating team work.


*** What is a workflow of reproducible research?

#+CAPTION: A workflow of reproducible research (Source: Peng, 2015)
#+ATTR_LATEX: :width 0.8\textwidth :height 0.7\textheight
#+ATTR_HTML: :width 750 :height 570
[[file:figure/research_pipline.png]]

#+BEGIN_NOTES
- Don't forget mention the direction of readers.
#+END_NOTES

*** What are necessary elements of reproducible research?

Roger Peng (2015) summarizes four essential elements to make results
reproducible:
- Analytical data
- Analytical code
- Documentation
- Distribution


** Literate programming

*** What is literate programming?

Literate programming (Donald Knuth, 1992) is the central part of
reproducible research.

Typically, literate programming involves the following three steps
(Xie, 2015):
1. parse the source document and separate the code from narratives;
2. execute the source code and return results;
3. mix results from the source code with the original narratives.

*** Available tools for literate programming

- WEB (Knuth, 1983)
- Noweb (Ramsey, 1994)
- =roxygen2= (Wickham et al., 2015)
- =knitr= (Xie, 2015b)
- Jupyter(IPython) Notebook
- Emacs org mode


** Literate programming with Org-mode

*** Source code blocks

The basic structure of code blocks is as follows

#+BEGIN_EXAMPLE
  #+NAME: <name>
  #+BEGIN_SRC <language> <switches> <header arguments>
     <body>
  #+END_SRC
#+END_EXAMPLE

The structure of an inline code block is

#+BEGIN_EXAMPLE
   src_<language>[<header arguments>]{<body>}
#+END_EXAMPLE

#+BEGIN_NOTES
This is the key component for carrying out literate programming in org
mode.
#+END_NOTES

*** Basic settings

#+BEGIN_EXAMPLE
  #+BEGIN_SRC emacs-lisp :eval no
    (org-babel-do-load-languages
     'org-babel-load-languages
       '((R . t)
         (python . t)
         (emacs-lisp . t)
         (calc . t)
         (latex . t)
         (org . t)
         (sh . t)))

      (setq org-confirm-babel-evaluate nil)
  #+END_SRC
#+END_EXAMPLE

*** Header arguments

Header arguments fine-tune the behaviors of source code blocks.

| Header arguments | Example                                 |
|------------------+-----------------------------------------|
| :exports         | :exports results or :exports none       |
| :results         | :results value table or :results silent |
| :eval            | :eval no                                |
| :cache           | :cache yes                              |
| :file            | :file ./img/figure1.png                 |

*** Results in raw format
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :exports both :results output
library(ggplot2)
head(mpg[1:5])
#+END_SRC

#+RESULTS:
:   manufacturer model displ year cyl
: 1         audi    a4   1.8 1999   4
: 2         audi    a4   1.8 1999   4
: 3         audi    a4   2.0 2008   4
: 4         audi    a4   2.0 2008   4
: 5         audi    a4   2.8 1999   6
: 6         audi    a4   2.8 1999   6
#+END_EXAMPLE


#+BEGIN_SRC R :exports none :results output
library(ggplot2)
head(mpg[1:5])
#+END_SRC

#+RESULTS:
:   manufacturer model displ year cyl
: 1         audi    a4   1.8 1999   4
: 2         audi    a4   1.8 1999   4
: 3         audi    a4   2.0 2008   4
: 4         audi    a4   2.0 2008   4
: 5         audi    a4   2.8 1999   6
: 6         audi    a4   2.8 1999   6

*** Results in org tables
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :exports results :results value table :colnames yes :cache yes
head(mpg[1:5])
#+END_SRC

#+RESULTS[f45a5d1174dd12cdb343701a0868203eda23a5bc]:
| manufacturer | model | displ | year | cyl |
|--------------+-------+-------+------+-----|
| audi         | a4    |   1.8 | 1999 |   4 |
| audi         | a4    |   1.8 | 1999 |   4 |
| audi         | a4    |     2 | 2008 |   4 |
| audi         | a4    |     2 | 2008 |   4 |
| audi         | a4    |   2.8 | 1999 |   6 |
| audi         | a4    |   2.8 | 1999 |   6 |
#+END_EXAMPLE

#+BEGIN_SRC R :exports none :results value table :colnames yes :cache yes
head(mpg[1:5])
#+END_SRC

#+RESULTS[430496a6e063d847940184b0d615419affeb7b73]:
| manufacturer | model | displ | year | cyl |
|--------------+-------+-------+------+-----|
| audi         | a4    |   1.8 | 1999 |   4 |
| audi         | a4    |   1.8 | 1999 |   4 |
| audi         | a4    |     2 | 2008 |   4 |
| audi         | a4    |     2 | 2008 |   4 |
| audi         | a4    |   2.8 | 1999 |   6 |
| audi         | a4    |   2.8 | 1999 |   6 |

#+BEGIN_NOTES
- Mention the change in header argument :results and :cache
#+END_NOTES

*** Results in figures
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :exports both :results output graphics :file mpg.png
  ggplot(mpg, aes(displ, cty, colour = class)) +
      geom_point()
#+END_SRC

#+ATTR_HTML: :width 600 :height 500
#+ATTR_LATEX: :width 0.6\textwidth :height 0.6\textheight
#+RESULTS:
[[file:figure/mpg.png]]
#+END_EXAMPLE

#+BEGIN_SRC R :exports none :results output graphics :file figure/mpg.png :cache yes
  library(ggplot2)
  ggplot(mpg, aes(displ, cty, colour = class)) +
      geom_point()
#+END_SRC

#+RESULTS[96aa6345f0d972c115da4de2caf963468fd86bb3]:
[[file:figure/mpg.png]]

#+BEGIN_NOTES
- Mention the value of :results graphics
#+END_NOTES

*** The figure generated

#+CAPTION: The Scatterplot Between the Engine Displacement and City MPG
#+ATTR_HTML: :width 600 :height 500
#+ATTR_LATEX: :width 0.6\textwidth :height 0.5\textheight
#+RESULTS:
[[file:figure/mpg.png]]

*** Results in latex
:PROPERTIES:
:BEAMER_opt(Opt): shrink
:END:

#+BEGIN_EXAMPLE
#+BEGIN_SRC R :exports both :results output latex
library(stargazer)
stargazer(mpg, header = FALSE)
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT latex

% Table created by stargazer v.5.2 by Marek Hlavac, Harvard University. E-mail: hlavac at fas.harvard.edu
% Date and time: Mon, Feb 06, 2017 - 09:45:31
\begin{table}[!htbp] \centering
  \caption{}
  \label{}
\begin{tabular}{@{\extracolsep{5pt}}lccccc}
\\[-1.8ex]\hline
\hline \\[-1.8ex]
Statistic & \multicolumn{1}{c}{N} & \multicolumn{1}{c}{Mean} & \multicolumn{1}{c}{St. Dev.} & \multicolumn{1}{c}{Min} & \multicolumn{1}{c}{Max} \\
\hline \\[-1.8ex]
displ & 234 & 3.472 & 1.292 & 1.600 & 7.000 \\
year & 234 & 2,003.500 & 4.510 & 1,999 & 2,008 \\
cyl & 234 & 5.889 & 1.612 & 4 & 8 \\
cty & 234 & 16.859 & 4.256 & 9 & 35 \\
hwy & 234 & 23.440 & 5.955 & 12 & 44 \\
\hline \\[-1.8ex]
\end{tabular}
\end{table}
#+END_EXPORT
#+END_EXAMPLE

#+BEGIN_SRC R :exports none :results output latex :cache yes
library(stargazer)
stargazer(mpg, header = FALSE, title = "Summary Statistics of the =mpg= dataset")
#+END_SRC

#+RESULTS[e468ad7948213825f05753512db4a63849c6bda3]:
#+BEGIN_EXPORT latex

\begin{table}[!htbp] \centering
  \caption{Summary Statistics of the =mpg= dataset}
  \label{}
\begin{tabular}{@{\extracolsep{5pt}}lccccc}
\\[-1.8ex]\hline
\hline \\[-1.8ex]
Statistic & \multicolumn{1}{c}{N} & \multicolumn{1}{c}{Mean} & \multicolumn{1}{c}{St. Dev.} & \multicolumn{1}{c}{Min} & \multicolumn{1}{c}{Max} \\
\hline \\[-1.8ex]
displ & 234 & 3.472 & 1.292 & 1.600 & 7.000 \\
year & 234 & 2,003.500 & 4.510 & 1,999 & 2,008 \\
cyl & 234 & 5.889 & 1.612 & 4 & 8 \\
cty & 234 & 16.859 & 4.256 & 9 & 35 \\
hwy & 234 & 23.440 & 5.955 & 12 & 44 \\
\hline \\[-1.8ex]
\end{tabular}
\end{table}
#+END_EXPORT

*** The LaTeX table generated

#+BEGIN_EXPORT latex

% Table created by stargazer v.5.2 by Marek Hlavac, Harvard University. E-mail: hlavac at fas.harvard.edu
% Date and time: Mon, Feb 06, 2017 - 09:45:31
\begin{table}[!htbp] \centering
  \caption{Summary Statistics of the =mpg= dataset}
  \label{}
\begin{tabular}{@{\extracolsep{5pt}}lccccc}
\\[-1.8ex]\hline
\hline \\[-1.8ex]
Statistic & \multicolumn{1}{c}{N} & \multicolumn{1}{c}{Mean} & \multicolumn{1}{c}{St. Dev.} & \multicolumn{1}{c}{Min} & \multicolumn{1}{c}{Max} \\
\hline \\[-1.8ex]
displ & 234 & 3.472 & 1.292 & 1.600 & 7.000 \\
year & 234 & 2,003.500 & 4.510 & 1,999 & 2,008 \\
cyl & 234 & 5.889 & 1.612 & 4 & 8 \\
cty & 234 & 16.859 & 4.256 & 9 & 35 \\
hwy & 234 & 23.440 & 5.955 & 12 & 44 \\
\hline \\[-1.8ex]
\end{tabular}
\end{table}
#+END_EXPORT

#+BEGIN_NOTES
- The table is not shown in there
#+END_NOTES

*** An mini example of literate programming

The following file is an example of reproducible research, which I
used in teaching Econometrics.

[[file:example/replicate_ch7.org]]

#+BEGIN_NOTES
- Open the file.
- This is a lecture notes for demonstrating R in the class of
  Econometrics. The example replicates the regression models in
  Chapter 7 in Stock and Watson's book of Introduction to
  Econometrics.
#+END_NOTES


* Collaboration with Git and Github

** What is Git?

- Git is a version control system (VCS) that records changes to a file
  or set of files over time so that you can recall specific versions
  later.

- Using Git to manage versions means that if you screw things up or
  lose files, you can easily recover.


** How does Git work?

#+CAPTION: Storing data as snapshots of the project over time
#+NAME: fig:snapshots
#+ATTR_HTML: :width 800
[[file:figure/snapshots.png]]


** The basic workflow of Git goes like this

#+CAPTION: Working tree, staging area, and Git directory
#+NAME: fig:threestages
[[file:figure/threestages.png]]


** A life cycle of a file

#+CAPTION: A life cycle of a file under git
#+NAME: fig:lifecycle
[[file:figure/lifecycle.png]]


** Basic Git commands

- ~git init~ :: create a git repository
- ~git add~ :: stage changes made to files
- ~git commit~ :: commit changes
- ~git status~ :: check the status
- ~git log~ :: check history


** Working with branches

*** Branches in a nutshell

#+CAPTION: Git branches in a nutshell
#+NAME: fig:gitbranch
[[file:figure/gitbranch.png]]

*** Branch command

- ~git branch~ :: create a branch
- ~git checkout~ :: checkout to a branch
- ~git merge~ :: merge a branch


** Remote repository and Github

- Git remote repositories make possible collaboration in a distributed
  way.
- GitHub provides remote repository hosting service, but it adds many
  of its own features.
- Visit https://github.com/ and sign up a free account right now!

*** Set up a Github repository

#+CAPTION: Initialize Github repository
#+NAME: fig:githubrepo
[[file:figure/newrepo.png]]

*** Remote commands

- ~git clone~ :: download a remote repository
- ~git remote add~ :: add a remote repository
- ~git pull~ :: update local files with all changes in the remote
- ~git push~ :: upload local changes to the remote


** Collaboration with Github

*** Fork and download

#+CAPTION: Fork a project
#+NAME: fig:fork-project
[[file:figure/fork.png]]

*** Make changes locally

#+BEGIN_SRC shell
$ git branch testing
$ git checkout testing
$ git commit -a -m "make some changes"
$ git push origin testing
#+END_SRC

*** Open pull request

#+CAPTION: Open a pull request
[[file:figure/openpullrequest.png]]

*** Merge pull request

#+CAPTION: Merge pull request
#+NAME: fig:merge-pull-request
[[file:figure/mergepull.png]]


** Other functionalities of Github

- Github page ::
  - https://pages.github.com
  - https://isem-cueb-ztian.github.io/Intro-Econometrics-2017/

- Github classroom ::
  - https://classroom.github.com/
  - https://github.com/ISEM-CUEB-ZTIAN


* Miscellaneous

** Tutorial sources
:PROPERTIES:
:BEAMER_env: frame
:END:

- John Kitchin's blog ::
  [[http://kitchingroup.cheme.cmu.edu/blog/2014/08/08/What-we-are-using-org-mode-for/]]

- John Kitchin's presentation on YouTube ::
  https://www.youtube.com/watch?v=1-dUkyn_fZA&t=126s

- Vikas Rawal's tutorial ::
     https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org

- The book /Pro Git/ ::
  Git is fully documented in this book, https://git-scm.com/book/en/v2.

- Github tutorial ::
  https://guides.github.com/activities/hello-world/


** Version information

- OS X El Capitan (Version 10.11.6)
- GNU Emacs version 25.1.1
- Org mode version 9.0.3
- Ess mode version 16.10


** Q & A

You can download my presentation at
https://github.com/zngtian/intro_org_RR or
#+BEGIN_SRC sh
git clone https://github.com/zngtian/intro_org_RR.git
#+END_SRC

Any comments and questions are welcomed.

Thanks!





